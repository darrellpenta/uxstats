% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/problem_stats-function.R
\name{problem_stats}
\alias{problem_stats}
\alias{problem_stats.numeric}
\alias{problem_stats.data.frame}
\title{Compute stats for problem occurrence data}
\usage{
problem_stats(.x, .y, ...)

\method{problem_stats}{numeric}(.x, .y, ..., .alpha = NULL)

\method{problem_stats}{data.frame}(.x, .y, ..., .alpha = NULL)
}
\arguments{
\item{.x}{You can pass an integer (>0) indicating the total number of users who encountered a problem, and provide the total number of users to \code{.y} (where the value of \code{.y} >= \code{.x}). Or you can pass a data frame containing similar data. See the examples below.}

\item{.y}{If \code{.x} is an integer representing the total number of successes, \code{.y} should be an integer indicating the total number of trials. Or, if \code{.x} is a long-format data frame, provide the unquoted name of the column containing the success data (as 1s and 0s) to \code{.y}.}

\item{...}{(Optional) If \code{.x} is a long-format data frame, you can pass the name of one or more grouping variables here as unquoted, comma-separated column names.}

\item{.alpha}{(Optional) A positive number (where 0 < \code{.alpha} < 1) specifying the desired confidence level to be used. The argument must be named (i.e., \code{.alpha=0.001}) or else the function may yield unexpected results. If the argument is omitted, the default value is 0.05, or a 95\% confidence level.}
}
\value{
A tibble with problem occurrence rate(s), confidence interval information, and other information. All percentage values in the output fall within the range of 0 and 100.
}
\description{
\code{problem_stats()} provides information about problem occurrence data, including problem occurrence rates (as percentages) and (Adjusted-Wald binomial) confidence interval information (as percentages). You can optionally include one or more grouping variables to compute problem occurrence rates by groups, and modify the alpha level to adjust confidence intervals.
}
\examples{

problem_stats(5,8) # Five users encountered a problem, 8 did not.

# The alpha level defaults to .alpha=0.05.
# You can provide your own alpha level
# to .alpha by naming the argument
# when you call the function:

problem_stats(15,20, .alpha = 0.01)

# If you have a long-format data frame,
# where each row contains an individual's
# data, and at least one column includes
# values indicating problem occurrences
# as 1s (problem encountered) and 0s
# you can pass the data frame to .x and
# specify the name of the task column:

.uxdata <-
data.frame("user_id" = c(1,2,3,4,5,6,7,8,9,10,11,12),
"login_prob" = c(1,0,0,1,0,0,1,1,0,0,1,0),
"group"=c("A","B","A","A","B","A","B","A","B","B","A","B"),
"version"=c(2,1,1,2,1,2,2,1,2,1,1,2),
stringsAsFactors = FALSE)

problem_stats(.uxdata, login_prob, group, .alpha=0.1)
}
\seealso{
Other descriptive stats for UX measures: 
\code{\link{ratings_stats}()},
\code{\link{success_stats}()},
\code{\link{time_stats}()}
}
\concept{descriptive stats for UX measures}
